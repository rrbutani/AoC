#!/usr/bin/env bash

# A really bad script to make it seems like Rust has a script execution mode.
#
# Add '#!/usr/bin/env rustr' to the top of your .rs file and make sure `rustr` is in your PATH.
# Then: ./<your_file>.rs
# It may work!
#
# This has many obvious shortcomings (i.e. crates!) but it might work for simple programs!
# We also support one bit of condition behavior: if $offline is set, we'll pass the right
# arguments so that the program runs without hitting AoC's servers.


pth="../../common/Rust/aoc/target/release/deps"
deps=(clap http reqwest scan_fmt select tap itertools bit_set bit_vec)

for ((i=0; i < ${#deps[@]}; i++)); do
    dep=${deps[i]}
    p=$(find "${pth}/" -iname "lib$dep-*.rlib" -print -quit)
    deps[i]="--extern ${dep}=${p}"
done

if [ -z "${offline+x}" ]; then
    # Not offline!
    flags=(--creds "../../common/creds")
else
    # input_file=$(find ../ -iname '*.input')
    flags=(--input ../*.input)
fi

rustc "$@" -L dependency="${pth}" \
   ${deps[@]} \
   --extern aoc="${pth}/../libaoc.rlib" \
   -o out \
   && { ./out "${flags[@]}" ; [ -z "${keep+x}" ] && rm -f out 2>/dev/null; }
