#!/usr/bin/env bash

# Expects <name>.
#
# Set AOC_YEAR to not use the current year.
# Set AOC_DAY to not use the next day for the year being used.
# Set AOC_LANG to generate files for a particular lang.

set -e

YEAR=${AOC_YEAR-$(date +%Y)}
ROOT="$(dirname "${0}")/../"
BASE="${ROOT}/${YEAR}"

langs=(rust)
if [ -n "${AOC_LANG+x}" ]; then
	langs=("${AOC_LANG}")
fi

function dependencies() {
    return 0
}

function openInEditor() {
	if [ "${TERM_PROGRAM}" == "vscode" ]; then
		code "${@}" || :
	else
		subl "${@}"
	fi
}

function srcFile() {
    cat - > "${1}"

    if [ "${2}" ]; then chmod +x "${1}"; fi

		openInEditor "${1}"
}

function python() {
    cat <<-EOF | srcFile "${1}/${2}.py" exec
		#!/usr/bin/env python3.8

		from aoc2020 import *

		i = inp()
		print(i)

		a1 = 0
		print(a1)
		# p1(a1)

		a2 = 0
		print(a2)
		# p2(a2)
		EOF
}

function rust() {
		num=$(($3)) # No leading 0 this way.
    cat <<-EOF | srcFile "${1}/${2}.rs" exec
	#!/usr/bin/env rustr

	#[allow(unused_imports)]
	use aoc::{AdventOfCode, friends::*};

	fn main() {
	    let mut aoc = AdventOfCode::new(${YEAR}, ${num});
	    let input: String = aoc.get_input();

	    println!("{}", input);

	    let p1 = 0;
	    println!("{}", p1);
	    // let _ = aoc.submit_p1(p1);

	    let p2 = 0;
	    println!("{}", p2);
	    // let _ = aoc.submit_p2(p2);
	}
	EOF

    cat <<-EOF >> "${1}/../Cargo.toml"

	[[bin]]
	name = "day${3}"
	path = "${3}/${2}.rs"
	EOF
}

function haskell() {
    echo "" | srcFile "${1}/${2}.hs"
}

function scala() {
    echo "" | srcFile "${1}/${2}.scala"
}

function elm() {
    echo "" | srcFile "${1}/${2}.elm"
}

function elixir() {
    echo "" | srcFile "${1}/${2}.exs"
}

function clojure() { :; }

function openEditorWindow() {
    if [ "${TERM_PROGRAM}" != "vscode" ]; then subl -n "${ROOT}"; fi
}

if [ -z "${1+x}" ]; then
    echo "Give me a name please!"
    exit 2
fi

nom="${1}"

# shellcheck disable=SC2010
lastDir=$(ls "${BASE}" | grep -E '^[0-9]{2}$' | sort | tail -1)
day="${AOC_DAY-"$((${lastDir##0} + 1))"}"
day="$(printf "%02d" "${day}")"
nextDir="${BASE}/${day}"

#------------------------------------------------------------------------------#

mkdir -p "${nextDir}"

dependencies

openEditorWindow "${nextDir}"

for lang in "${langs[@]}"; do
    $lang "${nextDir}" "${nom}" "${day}" || {
        echo "Something broke! Blame $lang ($?)" && exit 2
    }
done

