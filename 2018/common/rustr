#!/usr/bin/env bash

# A really bad script to make it seems like Rust has a script execution mode.
#
# Add '#!/usr/bin/env rustr' to the top of your .rs file and make sure `rustr` is in your PATH.
# Then: ./<your_file>.rs
# It may work!
#
# This has many obvious shortcomings (i.e. crates!) but it might work for simple programs!
# We also support one bit of condition behavior: if $offline is set, we'll pass the right
# arguments so that the program runs without hitting AoC's servers.


pth="../../common/rust/aoc/target/debug/deps/lib"
# deps=( "--extern clap="../../common/rust/aoc/target/debug/deps/libclap*.rlib )
deps=(
--extern clap=${pth}clap-285ebe091358d042.rlib
--extern http=${pth}http-625341d94605846a.rlib
--extern reqwest=${pth}reqwest-32689ee78bcf90d0.rlib
--extern scan_fmt=${pth}scan_fmt-4f9e0c9a54e9ab4f.rlib
--extern select=${pth}select-dd0b838d6c0ab975.rlib
--extern tap=${pth}tap-a1b1b81ca635c4dc.rlib
)

if [ -z "${offline+x}" ]; then
    # Not offline!
    flags=(--creds "../../common/creds")
else
    input_file=$(find ../ -iname '*.input')
    flags=(--input "${input_file}")
fi

rustc "$@" -L dependency=../../common/rust/aoc/target/debug/deps \
   "${deps[@]}" \
   --extern aoc=../../common/rust/aoc/target/debug/libaoc.rlib \
   -o out \
   && { ./out "${flags[@]}" ; rm -f out 2>/dev/null; }
